package com.example.cvbuilder.sercurity;

import com.example.cvbuilder.model.User;
import com.example.cvbuilder.repository.UserRepository;
import jakarta.servlet.FilterChain;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.web.authentication.WebAuthenticationDetailsSource;
import org.springframework.stereotype.Component;
import org.springframework.web.filter.OncePerRequestFilter;

import java.io.IOException;


/**
 * B·ªô l·ªçc x√°c th·ª±c JWT ch·∫°y tr∆∞·ªõc khi controller x·ª≠ l√Ω request.
 * M·ª•c ti√™u: ki·ªÉm tra token t·ª´ header Authorization, x√°c th·ª±c ng∆∞·ªùi d√πng n·∫øu token h·ª£p l·ªá.
 */
@Component // ƒë√°nh d·∫•u class n√†y l√† m·ªôt bean ƒë·ªÉ Spring qu·∫£n l√Ω. N√≥ s·∫Ω ƒë∆∞·ª£c t·ª± ƒë·ªông kh·ªüi t·∫°o v√† ƒë∆∞a v√†o context.
public class JwtAuthFilter extends OncePerRequestFilter {  //OncePerRequestFilter l√† m·ªôt class trong Spring Security ƒë·∫£m b·∫£o filter ch·ªâ ch·∫°y m·ªôt l·∫ßn duy nh·∫•t cho
                                                            // m·ªói request HTTP (tr√°nh b·ªã g·ªçi nhi·ªÅu l·∫ßn trong c√πng m·ªôt request).

    @Autowired //Spring s·∫Ω t·ª± ƒë·ªông ti√™m m·ªôt bean ki·ªÉu JwtService v√†o bi·∫øn jwtService
    private JwtService jwtService;
    @Autowired
    private UserRepository userRepository;







    /**
     @Override
     // l√† n∆°i b·∫°n vi·∫øt logic ƒë·ªÉ ki·ªÉm tra request, v√≠ d·ª•:
     //L·∫•y token t·ª´ header.
     //X√°c th·ª±c token.
     //N·∫øu h·ª£p l·ªá th√¨ thi·∫øt l·∫≠p th√¥ng tin ng∆∞·ªùi d√πng cho SecurityContext.

     protected void doFilterInternal(HttpServletRequest request, // ch·ª©a th√¥ng tin request t·ª´ client
     HttpServletResponse response, //ƒë·ªÉ vi·∫øt ph·∫£n h·ªìi tr·∫£ l·∫°i client n·∫øu c·∫ßn (v√≠ d·ª•: l·ªói x√°c th·ª±c).
     FilterChain filterChain) throws ServletException, IOException { //FilterChain filterChain l√† chu·ªói filter ti·∫øp theo. Sau khi b·∫°n x·ª≠ l√Ω xong,
     // b·∫°n c·∫ßn g·ªçi filterChain.doFilter(...) ƒë·ªÉ ti·∫øp t·ª•c lu·ªìng x·ª≠ l√Ω.

     String path = request.getServletPath();
     if (path.startsWith("/api/auth")) {
     filterChain.doFilter(request, response);
     return;
     }

     // L·∫•y header Authorization t·ª´ request
     final String authHeader = request.getHeader("Authorization");

     String token = null;
     String username = null;

     //Ki·ªÉm tra n·∫øu header t·ªìn t·∫°i v√† b·∫Øt ƒë·∫ßu b·∫±ng "Bearer "
     if(authHeader != null && authHeader.startsWith("Bearer ")) {
     token = authHeader.substring(7); // L·∫•y ph·∫ßn token sau "Bearer "
     username = jwtService.extractUsername(token); // Tr√≠ch xu·∫•t username t·ª´ token
     }

     // N·∫øu username h·ª£p l·ªá v√† ch∆∞a ƒë∆∞·ª£c x√°c th·ª±c
     if(username != null && SecurityContextHolder.getContext().getAuthentication() == null) {
     // T√¨m ng∆∞·ªùi d√πng trong c∆° s·ªü d·ªØ li·ªáu
     User user = userRepository.findByUsername(username).orElse(null);

     //Ki·ªÉm tra token c√≥ h·ª£p l·ªá v·ªõi user kh√¥ng
     if(user != null && jwtService.isTokenValid(token, user)) {
     // T·∫°o ƒë·ªëi t∆∞·ª£ng x√°c th·ª±c v√† g√°n v√†o SecurityContext
     UsernamePasswordAuthenticationToken authToken = new UsernamePasswordAuthenticationToken(user, null, null);
     authToken.setDetails(new WebAuthenticationDetailsSource().buildDetails(request));
     SecurityContextHolder.getContext().setAuthentication(authToken);
     }
     }
     //Ti·∫øp t·ª•c chu·ªói filter
     filterChain.doFilter(request, response);
     }


     * */


    @Override
    protected void doFilterInternal(HttpServletRequest request,
                                    HttpServletResponse response,
                                    FilterChain filterChain) throws ServletException, IOException {

        String path = request.getServletPath();

        //  B·ªè qua filter cho t·∫•t c·∫£ request KH√îNG b·∫Øt ƒë·∫ßu b·∫±ng /api/
        if (!path.startsWith("/api/")) {
            filterChain.doFilter(request, response);
            return;
        }

        System.out.println(" [Filter] Y√™u c·∫ßu t·ªõi: " + path);

        // B·ªè qua filter cho endpoint kh√¥ng c·∫ßn b·∫£o m·∫≠t
        if (path.startsWith("/api/auth")) {
            System.out.println(" [Filter] B·ªè qua v√¨ l√† endpoint auth");
            filterChain.doFilter(request, response);
            return;
        }

        // L·∫•y header Authorization
        final String authHeader = request.getHeader("Authorization");
        String token = null;
        String username = null;

        if (authHeader != null && authHeader.startsWith("Bearer ")) {
            token = authHeader.substring(7); // B·ªè "Bearer "
            System.out.println(" [Filter] Token nh·∫≠n ƒë∆∞·ª£c: " + token);
            try {
                username = jwtService.extractUsername(token);
                System.out.println("üë§ [Filter] Username tr√≠ch t·ª´ token: " + username);
            } catch (Exception e) {
                System.out.println(" [Filter] Token kh√¥ng h·ª£p l·ªá: " + e.getMessage());
            }
        } else {
            System.out.println(" [Filter] Kh√¥ng t√¨m th·∫•y header Authorization ho·∫∑c kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng");
        }

        if (username != null && SecurityContextHolder.getContext().getAuthentication() == null) {
            User user = userRepository.findByUsername(username).orElse(null);
            if (user != null) {
                System.out.println(" [Filter] User t·ªìn t·∫°i trong DB: " + user.getUsername());
                boolean valid = jwtService.isTokenValid(token, user);
                System.out.println("[Filter] Token h·ª£p l·ªá: " + valid);
                if (valid) {
                    UserPrincipal principal = new UserPrincipal(user);
                    UsernamePasswordAuthenticationToken authToken =
                            new UsernamePasswordAuthenticationToken(principal, null, null);

                    authToken.setDetails(new WebAuthenticationDetailsSource().buildDetails(request));
                    SecurityContextHolder.getContext().setAuthentication(authToken);
                    System.out.println(" [Filter] X√°c th·ª±c th√†nh c√¥ng!");
                }
            } else {
                System.out.println(" [Filter] Kh√¥ng t√¨m th·∫•y user trong DB");
            }
        }

        filterChain.doFilter(request, response);
    }


}
